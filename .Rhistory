install.packages("swirl")
install.packages("manipulate")
install.packages("shiny")
install.packages("manipulate")
install.packages("rCharts")
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
install_github('slidify','ramnathv')
library('slidify')
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors) #set up for partitions
train = createDataPartition(diagnosis, p = 0.50, list = FALSE)
test = createDataPartition(diagnosis, p=0.50, list=FALSE)
install.packages("caret")
install.packages("caret", dependencies=c("Depends", "Suggests"))
library(AppliedPredictiveModeling)
library(caret)
install.packages("tcltk")
install.packages("bwidget")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("caret", dependencies=c("Depends", "Suggests"))
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("tcltk2")
library(caret)
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(caret)
run(caret)
install.packages("shiny")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data.describ <- data.frame(Var.num = 1:37)
data.describe <- data.frame(Var.num = 1:37)
data.describe <- data.frame(Var.num = 1:37, Var.name = names(storm))
short.def <- c("alphabetical index of state", "Start date of event",
"Start time of event", "Time zone for starte date and time",
"County index number", "County name", "State abbreviation",
"Type of event", "bgn_range ??", "Event starting direction",
"End date of event", "End time of event",
"End county location", " countyendn_??", "endrange_??",
"Event end direction", "Event end location",
"Path length in miles and tenths of a mile",
"Maximum path width in yards",
"Intensity on enhanced Fugita scale_??",
"Event magnitude, using scale for type_??",
"Event related fatalities",
"Event related injuries",
"Property damage amount", "Property damage units",
"Crop damage amount", "Crop damage units",
"Weather forecast office", "State office",
"Marine forecast zone", "Latitude of event start (scale?)",
"Longitude of event start (scale?)",
"Latitude of event end (scale?)",
"Longitude of event end (scale?)",
"Remarks: description of event",
"Reference number"
)
length(short.def)
short.def
levels(storm$evtype)
help(setnames)
setnames()
?setnames()
# Evaluating Storm Data: Public Health and Economic Concerns
help('setnames')
?setnames()
install.packages("lubridate")
install.packages(c("BradleyTerry2", "ca", "deSolve", "Ecdat", "googleVis", "gplots", "heplots", "igraph", "lme4", "lpSolve", "MASS", "Matrix", "mboost", "mgcv", "multcomp", "mvtnorm", "np", "party", "Rcpp", "RcppArmadillo", "rgl", "sampleSelection", "sfsmisc", "yaml"))
library(swirl)
swirl()
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4))
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
regrline <- lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic <- fit$coef[1]
fit$coef[2]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs,rhs)
varChild <- var(children$height)
varChild <- var(children$height)
help
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(ols.slope)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild,varRes)
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(fit$residuals)
mean(efit$residuals)
cov(attenu$mag)
help
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- var(galton$child)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child~parent)
help
fit <- lm(child ~parent, galton)
help
sqrt(sum(fit$residulas^2)/(n-2))
sqrt(sum(fit$residuals^2) / (n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <-
s
help
sTot <- sum((galton$child-mu)^2)
sRes <- sum(())
help
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r
summary(fit)$.squared
summary(fit)$r.squared
cor(galton$child, galton$parent)
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ ones + parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1)
help
swirl()
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(fertility ~ ".")
help
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination, Education)
help
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ ., swiss)
help
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays, 15)
InsectSprays$A
sB
sB
summary(InsectSprays[,2])
sapply(InsectSpray)
sapply(InsectSpray, class)
help
sapply(InsectSprays, class)
fit <- lm(count~spray, InsectSprays)
fit$coef
summary(fit)$coef
est <- fit[,1]
help
est <- summary(fit)$coef[,1]
mean(sA)
mean(sprayB)
mean(sB)
nfit <- (count~spray -`)
1
34
sd;
shdf
()
[]
sdf
sdfsdf
help
()
library(swirl)
swirl()
help
nfit <- lm(count ~ spray -1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, C)
help
spray2 <- relevel(InsectSprays$spray, \"C\")
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,"C\")
lk;
library(swirl)
swirl()
spray2 <- relevel(InsectSprays$spray,"C\")
\
library(swirl)
swirl()
spray2 <- relevel(InsectSprays$spray, ref="C")
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,\"C")
spray2 <- relevel(InsectSprays$spray,"C")
help
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)
summary(fit2)$coef
mean(sC)
fit$coef[2]-fit$coef[3]
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(hunger, year)
help
fit <- lm(hunger$Numeric ~ hunger$Year)
summary(fit)$coef
lmF <- x[hunger]
help
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric ~ Year+Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
help()
fitno <- lm(y~x, out2[-1,1])
fitno <- lm(y ~ x, out2[-1, ])
help()
plot(fitno, which =1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"] - predict(fitno, out2[1,])
1 - resid(fit)[1]
1 - resid(fit)[1]/resno
head(hatvalues(fit))
help
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd
help
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
had(cbind(rstd, rstandard(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
help
plot(fit, which=2)
sigma1 <- deviance(fitno) / residual
help
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1 * sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
predict(fit,out2)
dy <- predict(fitno, out2)-predict(fit,out2)
help
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
rgp1()
rgp2()
head(swiss)
help
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm (Fertility ~ Agriculture, swiss)
fit3 <- lm (Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(ravenWinNum~ravenScore)
help
mdl <- glm (ravenWinNum ~ ravenScore, family = binomial, data=ravenData)
lodds <- predict(mdl, data.frame(raveScore=c(0,3,6)))
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
predict(exp(lodds)/(1+exp(lodds)))
help
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000,50))
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(b1(confint(mdl)))
exp(confint(mdl))
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- help
swirl()
help
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
library(httr)
oauth_endpoints("github")
#
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(swirl)
swirl()
which.max(hits[,'visits'])
hits[704,]
lamda <- mdl$fitted.values[704]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <-
gm
help()
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
sdfs
d
sdf
0
help()
quit()
757.39+637.92
install.packages("~/Downloads/DDPQuiz3_1.0.zip", repos = NULL)
install.packages("~/Downloads/DDPQuiz3_1.0.zip", repos = NULL)
200 * 2.75
200 * 2.7511
install.packages("ape")
install.packages("AppliedPredictiveModeling")
install.packages(c("arm", "BayesX", "bdsmatrix", "BradleyTerry2"))
install.packages(c("ca", "car", "caret", "caTools", "class", "cluster"))
install.packages(c("codetools", "coin", "corrgram", "DBI", "deldir", "deSolve"))
install.packages(c("devtools", "e1071", "Ecdat", "effects", "flexmix", "Formula"))
install.packages(c("gamlss", "gamlss.dist", "geepack", "geoR", "geosphere", "gplots", "gsubfn"))
install.packages(c("heplots", "hexbin", "Hmisc", "HSAUR", "htmltools", "httr", "igraph"))
install.packages(c("ineq", "jsonlite", "KernSmooth", "kinship2", "klaR", "ks", "labeling"))
install.packages(c("Lahman", "lme4", "logcondens", "lpSolve", "maps", "MASS", "Matrix"))
install.packages(c("mboost", "mclust", "mgcv", "mime", "mitools", "MPV", "multcomp", "mvtnorm", "NLP"))
install.packages(c("nor1mix", "np", "optmatch", "party", "pcaPP", "proxy", "pscl", "qdap", "qdapDictionaries", "qdapTools"))
install.packages(c("R.utils", "RandomFields", "randomForest", "RANN", "raster", "rasterVis", "rattle", "Rcpp"))
install.packages(c("RcppArmadillo", "RcppEigen", "RefManageR", "repmis", "rgl", "RItools", "rmarkdown", "rms", "roxygen2", "RUnit"))
install.packages(c("sampleSelection", "sandwich", "sem", "semPlot", "sfsmisc", "shiny", "SimComp", "spam", "SparseM", "spatstat", "spdep", "survey", "swirl", "testthat", "UsingR", "vcd", "XLConnect", "xlsxjars", "xtable", "yaml"))
/opt/shiny-server/ext/pandoc/pandoc --version
sudo ln -s /usr/lib/rstudio-server/bin/pandoc/pandoc-citeproc /usr/local/bin
library("pander", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("aplpack", "boot", "corpcor", "jsonlite", "lavaan", "MASS", "microbenchmark", "mime", "Rcpp", "shiny"))
options(rpubs.upload.method = “internal”)
library("pander", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("data.table", "mboost", "mi", "multcomp", "qdapTools", "quantmod", "RandomFields", "semTools", "shiny", "splancs", "testthat"))
install.packages("pandoc")
knitr::opts_chunk$set(cache=FALSE)
devtools::install_github("yihui/knitr", build_vignettes = FALSE)
install.packages(c("devtools", "nlme", "quantmod", "stringdist"))
devtools::install_github("rstudio/rmarkdown")
4 * -1.25
xelatex -output-driver="xdvipdfmx -V 5" <soc_303_homework_2_SOLUTIONS.md>
setwd("~/Google Drive/CSUF_SOC_2014F/sociology303_2014F/weekly_presentations/week8/Mon_10_13_14_ch9")
library(slidify)
library(rCharts)
author('slidesCH9')#Two Sample t-tests
setwd("~/Google Drive/CSUF_SOC_2014F/sociology303_2014F/weekly_presentations/week8/Mon_10_13_14_ch9/slidesCH9")
slidify("index.RMD")
slidify("index.RMD")
slidify("index.RMD")
slidify("index.RMD")
slidify("index.RMD")
slidify("index.RMD")
slidify("index.RMD")
slidify("index.RMD")
